require 'pp'

require_relative 'integral/calculator'

task :run do
  
  collected_functions_data = {
    functions: collect_functions,
    borders:   collect_borders,
    params:    collect_params
  }

  step     = 0.0001
  quantity = 100_000

  puts <<-OUTPUT
    ============== DATA ==============
    Functions:
    \t f(x) = a_param * (1.0 - x) * x 
    \t f(y) = Math.exp(-m_param * y) 
    \t f(z) = Math.sin(Math::PI * k_param * z) 
    Borders:
    \t for x = #{collected_functions_data.dig(:borders, :x)}
    \t for y = #{collected_functions_data.dig(:borders, :y)}
    \t for x = #{collected_functions_data.dig(:borders, :z)}
    Quantity: \t\t\t\t#{quantity}
    Step (for rectangles method only): \t#{step}
    ==============/DATA ==============
  OUTPUT

  integrator = Integral::Calculator.new()

  integrator.engine = Integral::Engine::Direct.new(collected_functions_data, quantity)
  direct = integrator.result

  integrator.engine = Integral::Engine::Rectangles.new(collected_functions_data, step)
  rectangles = integrator.result
  rectangles_diff_direct = volume_diff_between(rectangles, direct)

  integrator.engine = Integral::Engine::SimplestMonteCarlo.new(collected_functions_data, quantity)
  simplest_mc = integrator.result
  simplest_diff_direct = volume_diff_between(simplest_mc, direct)

  integrator.engine = Integral::Engine::GeometricMonteCarlo.new(collected_functions_data, quantity)
  geometric_mc = integrator.result
  geometric_diff_direct = volume_diff_between(geometric_mc, direct)

  puts <<-OUTPUT
    ============= RESULT =============
    Direct: 
      volume:   \t\t#{direct[:volume]}
      mistake:  \t\t#{direct[:mistake]}
    Rectangles:
      volume:   \t\t#{rectangles[:volume]}
      mistake:  \t\t#{rectangles[:mistake]}
      step: \t\t\t#{rectangles[:quantity]}
      differend to direct: \t#{rectangles_diff_direct}
    The Simplest Monte Carlo:
      volume:   \t\t#{simplest_mc[:volume]}
      mistake:  \t\t#{simplest_mc[:mistake]}
      quantity: \t\t#{simplest_mc[:quantity]}
      differend to direct: \t#{simplest_diff_direct}
    The Geometric Monte Carlo:
      volume:   \t\t#{geometric_mc[:volume]}
      mistake:  \t\t#{geometric_mc[:mistake]}
      quantity: \t\t#{geometric_mc[:quantity]}
      differend to direct: \t#{geometric_diff_direct}
    =============/RESULT =============
  OUTPUT

end

def volume_diff_between(this, other)
  (this[:volume] - other[:volume]).abs
end

def collect_functions
  func_x = ->(x, params) { params[:a].to_f * (1.0 - x.to_f) * x.to_f }
  func_y = ->(y, params) { Math.exp(-params[:m].to_f * y.to_f) }
  func_z = ->(z, params) { Math.sin(Math::PI * params[:k].to_f * z.to_f) }

  {
    x: func_x,
    y: func_y,
    z: func_z 
  }
end

def collect_params
  {
    x: { a: 1.0 },
    y: { m: 1.0 },
    z: { k: 1.0 }
  }  
end

def collect_borders
  border_right = {
    x: 1,
    y: 1,
    z: 1
  }

  {
    x: Range.new(0, border_right[:x].to_f),
    y: Range.new(0, border_right[:y].to_f),
    z: Range.new(0, border_right[:z].to_f)
  }
end
