require 'pp'

require_relative 'integral/calculator'

task :run do
  step = 0.0001
  quantity = 100_000
  
  a_param = m_param = k_param = 1.0

  # impotant: range should be floatable 
  borders_x = 0..1.0
  borders_y = 0..1.0
  borders_z = 0..1.0

  func_x = ->(x) { a_param.to_f * (1.0 - x.to_f) * x.to_f }
  func_y = ->(y) { Math.exp(-m_param.to_f * y.to_f) }
  func_z = ->(z) { Math.sin(Math::PI * k_param.to_f * z.to_f) }

  collected_borders = {
    x: borders_x,
    y: borders_y,
    z: borders_z
  }

  collected_funcs = {
    x: func_x,
    y: func_y,
    z: func_z 
  }

  c = Integral::Calculator.new()
  c.engine = Integral::Engine::Rectangles.new(collected_borders, collected_funcs, step)
  c.procces
  pp c.engine

  c.engine = Integral::Engine::SimplestMonteCarlo.new(collected_borders, collected_funcs, quantity)
  c.procces
  pp c.engine

  c.engine = Integral::Engine::Mode.new(collected_borders, collected_funcs, quantity)
  c.procces
end
